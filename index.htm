<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>sb2.js project viewer</title>
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />

    <script type="text/javascript" src='script/ZipFile.complete.js'></script>
    <script type="text/javascript" src="http://canvg.googlecode.com/svn/trunk/rgbcolor.js"></script> 
    <script type="text/javascript" src="http://canvg.googlecode.com/svn/trunk/canvg.js"></script> 

    <script type="text/javascript" src='http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js'></script>

    <script type="text/javascript" src='http://ajax.googleapis.com/ajax/libs/jqueryui/1.7.2/jquery-ui.min.js'></script>

<script>

// sb2.js project viewer by RHY3756547
// ----------------------------------
//
// Converts scratch projects to javascript (client side) and excutes them.
//
// ZipFile (zip reader) by Cheeso (http://cheeso.members.winisp.net/)
// CanVG (for rasterising SVGs) by gabelerner i think (http://code.google.com/p/canvg/)


// general purpose functions

// base 64 encode by some guy 
// thanks some guy

function base64Encode(bytearray){

    var digits = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        i = 0,
        cur, prev, byteNum,
        result=[];      

    while(i < bytearray.length){

        cur = bytearray[i];
        byteNum = i % 3;

        switch(byteNum){
            case 0: //first byte
                result.push(digits.charAt(cur >> 2));
                break;

            case 1: //second byte
                result.push(digits.charAt((prev & 3) << 4 | (cur >> 4)));
                break;

            case 2: //third byte
                result.push(digits.charAt((prev & 0x0f) << 2 | (cur >> 6)));
                result.push(digits.charAt(cur & 0x3f));
                break;
        }

        prev = cur;
        i++;
    }

    if (byteNum == 0){
        result.push(digits.charAt((prev & 3) << 4));

        result.push("==");
    } else if (byteNum == 1){
        result.push(digits.charAt((prev & 0x0f) << 2));
        result.push("=");
    }

    return result.join("");
}

function computeHue(r, g, b){
	r /= 255
	g /= 255
	b /= 255
	return Math.atan2(2*(r-g-b), Math.pow((g-b), 1/3))+Math.PI
}

function computeLightness(r, g, b){
	var smax = Math.max(r, g, b);
	var smin = Math.min(r, g, b);
	return ((smax+smin)/2)*100/255;
}

function computeSaturation(r, g, b){
	var smax = Math.max(r, g, b)
	var smin = Math.min(r, g, b)
	var delta = (smax-smin)/255

	if (delta == 0) {
		return 0;
	} else {
		return (delta/(1-Math.abs((2*((smax+smin)/2)/255)-1)))*100;
	}
}

function drawRoundedRectangle(targetcontext, x, y, width, height, roundedpx) { //i draw a lot of these

	x += 0.5;
	y += 0.5;

	targetcontext.beginPath();
	targetcontext.moveTo(x+roundedpx, y);
	targetcontext.lineTo(x+width-roundedpx, y);
	targetcontext.bezierCurveTo(x+width, y, x+width, y+roundedpx, x+width, y+roundedpx);
	targetcontext.lineTo(x+width, y+height-roundedpx);
	targetcontext.bezierCurveTo(x+width, y+height, x+width-roundedpx, y+height, x+width-roundedpx, y+height);
	targetcontext.lineTo(x+roundedpx, y+height);
	targetcontext.bezierCurveTo(x, y+height, x, y+height-roundedpx, x, y+height-roundedpx);
	targetcontext.lineTo(x, y+roundedpx);
	targetcontext.bezierCurveTo(x, y, x+roundedpx, y, x+roundedpx, y);
	targetcontext.lineTo(x+roundedpx+0.1, y);
	targetcontext.closePath();

	x -= 0.5;
	y -= 0.5;

}

// SCRATCH EXECUTION QUEUE FUNCTIONS

function scratchAddExecution(spriten, type, sid, time, repeatNum) {
	if (typeof repeatNum == "undefined") repeatNum = 0;

	if (type != 'broadcast') {
	executionQueue[spriten].push(new Object());
	executionQueue[spriten][executionQueue[spriten].length-1].type = type;
	executionQueue[spriten][executionQueue[spriten].length-1].scriptID = sid;
	executionQueue[spriten][executionQueue[spriten].length-1].timeUntil = time;
	executionQueue[spriten][executionQueue[spriten].length-1].repeatNum = repeatNum;
	} else {
	for (spriten=0;spriten<sprites.length;spriten++) {

		if (scripts[spriten]['broadcast'][sid] != undefined) {
			executionQueue[spriten].push(new Object());
			executionQueue[spriten][executionQueue[spriten].length-1].type = type;
			executionQueue[spriten][executionQueue[spriten].length-1].scriptID = sid;
			executionQueue[spriten][executionQueue[spriten].length-1].timeUntil = time;
			executionQueue[spriten][executionQueue[spriten].length-1].repeatNum = repeatNum;
		}
		}
	}
}

function processExecutionQueue() {


		for (q=0;q<executionQueue[spr].length;q++) {

			if (executionQueue[spr][q].type == "wait") {
				if (0 >= executionQueue[spr][q].timeUntil) {

					eval(scripts[spr]['wait'][executionQueue[spr][q].scriptID]);
					executionQueue[spr].splice(q,1);
					for (i=0;i<repeatStack.length;i++) {
						if (repeatStack[i] > q) repeatStack[i] -= 1;	
					}
					q -= 1;


				} else {
					executionQueue[spr][q].timeUntil -= 1/30;
				}

			} else if (executionQueue[spr][q].type == "broadcast") {

				
				if (0 >= executionQueue[spr][q].timeUntil) {

					for (b=0; b<scripts[spr][executionQueue[spr][q].type][executionQueue[spr][q].scriptID].length; b++) {
						eval(scripts[spr][executionQueue[spr][q].type][executionQueue[spr][q].scriptID][b]);
						if (!(active)) break;
					}

					executionQueue[spr].splice(q,1);
					for (i=0;i<repeatStack.length;i++) {
						if (repeatStack[i] > q) repeatStack[i] -= 1;	
					}
					q -= 1;

				} else {
					executionQueue[spr][q].timeUntil -= 1;
				}

			} else if ((executionQueue[spr][q].type == "forever" || executionQueue[spr][q].type == "repeat")) {

				if (0 >= executionQueue[spr][q].timeUntil) {

					eval(scripts[spr][executionQueue[spr][q].type][executionQueue[spr][q].scriptID]);
					executionQueue[spr].splice(q,1);
					for (i=0;i<repeatStack.length;i++) {
						if (repeatStack[i] > q) repeatStack[i] -= 1;	
					}
					q -= 1;

				} else {
					executionQueue[spr][q].timeUntil -= 1;
				}
			}

			if (!(active)) break;

		}

}

function scratchRemoveExtraBrackets(text) {

	var openbrackets = 0;
	var result = "var run = function() { ";

	for (char = 0;char<text.length;char++) {
		if (text.charAt(char) == "{") openbrackets += 1;
		if (text.charAt(char) == "}") {
			if (openbrackets > 0) {
				openbrackets -= 1;
				result += text.charAt(char)
			}
		} else {
			result += text.charAt(char)
		}
	}

	result += "}; run();";
	return result;
}
// START SCRATCH BLOCK FUNCTIONS
// not all blocks need to be functions but it speeds up the ones that need multiple lines of code and get slowed down by eval()

function scratchSetVar(spriten, name, value) {

	if (!(spriten == "stage")) {

	if (typeof sprites[spriten].variables != 'undefined') {

	var id = varIndex[spriten].indexOf(name);

	if (id != -1) {
		sprites[spriten].variables[id].value = value;
		return;
	}

	}

	}

	id = globalvarIndex.indexOf(name);

	if (id != -1) {
		project.variables[id].value = value;
		return;
	}

	log("Cannot set variable '"+name+"', does not exist!");
}

function scratchChangeVar(spriten, name, value) {

	if (!(spriten == "stage")) {

	if (typeof sprites[spriten].variables != 'undefined') {

	var id = varIndex[spriten].indexOf(name);

	if (id != -1) {
		sprites[spriten].variables[id].value = Number(sprites[spriten].variables[id].value)
		sprites[spriten].variables[id].value += Number(value);
		return;
	}

	}

	}

	id = globalvarIndex.indexOf(name);

	if (id != -1) {
		project.variables[id].value = Number(project.variables[id].value);
		project.variables[id].value += Number(value);
		return;
	}

	log("Cannot set variable '"+name+"', does not exist!");
}

function scratchReadVar(spriten, name) {

	if (!(spriten == "stage")) {

	if (typeof sprites[spriten].variables != 'undefined') {

	var id = varIndex[spriten].indexOf(name);

	if (id != -1) {
		return sprites[spriten].variables[id].value;
	}

	}

	}

	id = globalvarIndex.indexOf(name);

	if (id != -1) {
		return project.variables[id].value;
	}

	log("Cannot read variable '"+name+"', does not exist!");
}

function scratchGetAttribute(name, target) {

	for (i=0;i<sprites.length;i++) {
		if (sprites[i].objName == target) {
			target = i;
		}
	}

	if (typeof sprites[target].variables != 'undefined') {

	var id = varIndex[target].indexOf(name);

	if (id != -1) {
		return sprites[target].variables[id].value;
	}
	}

}

function scratchReadList(spriten, location, name) {

	if (!(spriten == "stage")) {

	if (typeof sprites[spriten].lists != 'undefined') {

	var id = listIndex[spriten].indexOf(name);

	if (id != -1) {
		if (location == 'any') {
			return sprites[spriten].lists[id].contents[scratchRandomFromTo(1, sprites[spriten].lists[id].contents.length)];
		} else if (location == 'last') {
			return sprites[spriten].lists[id].contents[sprites[spriten].lists[id].contents.length];
		} else {
			return sprites[spriten].lists[id].contents[location-1];
		}
	}

	}

	}

	var id = globallistIndex.indexOf(name);

	if (id != -1) {
		if (location == 'any') {
			return project.lists[id].contents[scratchRandomFromTo(1, project.lists[id].contents.length)];
		} else if (location == 'last') {
			return project.lists[id].contents[project.lists[id].contents.length];
		} else {
			return project.lists[id].contents[location-1];
		}
	}

	log("Cannot read from list '"+name+"', does not exist!");
}

function scratchAppendList(spriten, value, name) {

	if (!(spriten == "stage")) {

	if (typeof sprites[spriten].lists != 'undefined') {

	var id = listIndex[spriten].indexOf(name);

	if (id != -1) {
		sprites[spriten].lists[id].contents.push(value);
		return;
	}

	}

	}

	var id = globallistIndex.indexOf(name);

	if (id != -1) {
		project.lists[id].contents.push(value);
		return;
	}

	log("Cannot add to list '"+name+"', does not exist!");
}

function scratchDeleteList(spriten, location, name) {

	if (!(spriten == "stage")) {

	if (typeof sprites[spriten].lists != 'undefined') {

	var id = listIndex[spriten].indexOf(name);

	if (id != -1) {
		
		if (location == 'all') {
			sprites[spriten].lists[id].contents = new Array();
		} else if (location == 'last') {
			sprites[spriten].lists[id].contents.pop();
		} else {
			sprites[spriten].lists[id].contents.splice(location-1, 1);
		}
		return;
	}

	}

	}

	var id = globallistIndex.indexOf(name);

	if (id != -1) {

		if (location == 'all') {
			project.lists[id].contents = new Array();
		} else if (location == 'last') {
			project.lists[id].contents.pop();
		} else {
			project.lists[id].contents.splice(location-1, 1);
		}
		return;
	}

	log("Cannot remove from list '"+name+"', does not exist!");
}

function scratchAddList(spriten, value, location, name) {

	if (!(spriten == "stage")) {

	if (typeof sprites[spriten].lists != 'undefined') {

	var id = listIndex[spriten].indexOf(name);

	if (id != -1) {
		
		if (location == 'any') {
			sprites[spriten].lists[id].contents.splice(scratchRandomFromTo(1, sprites[spriten].lists[id].contents.length), 0, value);
		} else if (location == 'last') {
			sprites[spriten].lists[id].contents.push(value);
		} else {
			sprites[spriten].lists[id].contents.splice(location-1, 0, value);
		}
		return;
	}

	}

	}

	var id = globallistIndex.indexOf(name);

	if (id != -1) {

		if (location == 'any') {
			project.lists[id].contents.splice(location-1, scratchRandomFromTo(1, project.lists[id].contents.length), value);
		} else if (location == 'last') {
			project.lists[id].contents.push(value);
		} else {
			project.lists[id].contents.splice(location-1, 0, value);
		}
		return;
	}

	log("Cannot add to list '"+name+"', does not exist!");
}

function scratchReplaceList(spriten, value, location, name) {

	if (!(spriten == "stage")) {

	if (typeof sprites[spriten].lists != 'undefined') {

	var id = listIndex[spriten].indexOf(name);

	if (id != -1) {
		
		if (location == 'any') {
			sprites[spriten].lists[id].contents[scratchRandomFromTo(1, sprites[spriten].lists[id].contents.length)] = value;
		} else if (location == 'last') {
			sprites[spriten].lists[id].contents[sprites[spriten].lists[id].contents.length] = value;
		} else {
			sprites[spriten].lists[id].contents[location-1] = value;
		}
		return;
	}

	}

	}

	var id = globallistIndex.indexOf(name);

	if (id != -1) {

		if (location == 'any') {
			project.lists[id].contents[scratchRandomFromTo(1, project.lists[id].contents.length)] = value;
		} else if (location == 'last') {
			project.lists[id].contents[project.lists[id].contents.length] = value;
		} else {
			project.lists[id].contents[location-1] = value;
		}

		return;
	}

	log("Cannot remove from list '"+name+"', does not exist!");
}


function scratchListLength(spriten, name) {

	if (!(spriten == "stage")) {

	if (typeof sprites[spriten].lists != 'undefined') {

	var id = listIndex[spriten].indexOf(name);

	if (id != -1) {
		return sprites[spriten].lists[id].contents.length;
	}

	}

	}

	var id = globallistIndex.indexOf(name);

	if (id != -1) {
		return project.lists[id].contents.length;
	}
}

function scratchListContains(spriten, name, value) {

	if (!(spriten == "stage")) {

	if (typeof sprites[spriten].lists != 'undefined') {

	var id = listIndex[spriten].indexOf(name);

	if (id != -1) {
		return (sprites[spriten].lists[id].contents.indexOf(value) > -1);
	}

	}

	}

	var id = globallistIndex.indexOf(name);

	if (id != -1) {
		return (project.lists[id].contents.indexOf(value) > -1);
	}
}



function scratchGotoSprite(spriten, name) {
	if (name == '_mouse_') {
		sprites[spriten].scratchX = MouseX;
		sprites[spriten].scratchY = MouseY;
	}

	for (i=0;i<sprites.length;i++) {
		if (sprites[i].objName == name) {
			sprites[spriten].scratchX = sprites[i].scratchX;
			sprites[spriten].scratchY = sprites[i].scratchY;
			return;
		}
	}
}

function scratchStopAllSounds() {

	if (typeof audio == 'undefined') return;

	for (i=0;i<audio.length;i++) {
		try {
		audio[i].pause();
		audio[i].currentTime = 0.0;
		} catch(err) {

		}
	}
}

function scratchDistance(spriten, name) {
	if (name == '_mouse_') {	
		return Math.sqrt(Math.pow((sprites[spriten].scratchX - MouseX), 2) + Math.pow((sprites[spriten].scratchY - MouseY), 2));
	}

	for (i=0;i<sprites.length;i++) {
		if (sprites[i].objName == name) {
			return Math.sqrt((sprites[spriten].scratchX - sprites[i].scratchX)^2 + (sprites[spriten].scratchY - sprites[i].scratchY)^2);
		}
	}
}

function scratchPointTowards(spriten, name) {
	if (name == '_mouse_') {
		//alert();
		sprites[spriten].direction = (Math.atan2(MouseX - sprites[spriten].scratchX, MouseY - sprites[spriten].scratchY)/Math.PI)*180;
	}

	for (i=0;i<sprites.length;i++) {
		if (sprites[i].objName == name) {
			sprites[spriten].direction = (Math.atan2(sprites[i].scratchX - sprites[spriten].scratchX, sprites[8].scratchY - sprites[spriten].scratchY)/Math.PI)*180;
		}
	}

	if (sprites[spriten].direction < -180) sprites[spriten].direction += 360*Math.ceil((sprites[spriten].direction+180)/-360);
	sprites[spriten].direction = ((sprites[spriten].direction+180)%360)-180;
}

function scratchStep(spriten, value) {
	//alert(value);
	sprites[spriten].scratchX = Number(sprites[spriten].scratchX);
	sprites[spriten].scratchY = Number(sprites[spriten].scratchY);

	sprites[spriten].scratchX += Math.sin(sprites[spriten].direction*Math.PI/180)*value;
	sprites[spriten].scratchY += Math.cos(sprites[spriten].direction*Math.PI/180)*value;
}

function scratchMathFunction(type, value) {
	if (type == "abs") return Math.abs(value);
	if (type == "sqrt") return Math.sqrt(value);
	if (type == "sin") return Math.sin(value*Math.PI/180);
	if (type == "cos") return Math.cos(value*Math.PI/180);
	if (type == "tan") return Math.tan(value*Math.PI/180);
	if (type == "asin") return Math.asin(value)*180/Math.PI;
	if (type == "acos") return Math.acos(value)*180/Math.PI;
	if (type == "atan") return Math.atan(value)*180/Math.PI;
	return 0;
}

function scratchSetCostume(spriten, value) {

	for (i=0;i<sprites[spriten].costumes.length;i++) {
		if (sprites[spriten].costumes[i].costumeName == value) {
			sprites[spriten].currentCostumeIndex = i;
			return;
		}
	}
	if (value < 1) value = sprites[spriten].costumes.length;
	sprites[spriten].currentCostumeIndex = Math.max(Math.min(Math.round(value-1), sprites[spriten].costumes.length-1), 0);
}

function scratchRandomFromTo(rand1, rand2) {
	return Math.floor(((rand2+1)-rand1)*Math.random())+rand1;
}



function scratchParseCharCode(key) {
	if (key == "up arrow") return 38;
	else if (key == "left arrow") return 37;
	else if (key == "right arrow") return 39;
	else if (key == "down arrow") return 40;
	else if (key == "space") key = " ";

	return key.charCodeAt(0);	
}

function scratchKeyDown(key) {
	if (key == "up arrow") return keyDownArray[38];
	else if (key == "left arrow") return keyDownArray[37];
	else if (key == "right arrow") return keyDownArray[39];
	else if (key == "down arrow") return keyDownArray[40];
	else if (key == "space") key = " ";

	return keyDownArray[key.charCodeAt(0)];	
}

function scratchMod(val1, val2) {
	return val1-(Math.floor(val1/val2)*val2);
}

function scratchGotoXY(spriten, x, y) {
	if (specialproperties[spriten].pendown) {
		penctx.beginPath();
		penctx.moveTo(sprites[spriten].scratchX+240, 180-sprites[spriten].scratchY);
		penctx.lineTo(x+240, 180-y);
		penctx.stroke();
	}
	sprites[spriten].scratchX = x;
	sprites[spriten].scratchY = y;
}

function scratchGotoX(spriten, x) {
	if (specialproperties[spriten].pendown) {
		penctx.beginPath();
		penctx.moveTo(sprites[spriten].scratchX+240, 180-sprites[spriten].scratchY);
		penctx.lineTo(x+240, 180-sprites[spriten].scratchY);
		penctx.stroke();
	}
	sprites[spriten].scratchX = x;
}

function scratchChangeX(spriten, x) {
	if (specialproperties[spriten].pendown) {
		penctx.beginPath();
		penctx.moveTo(sprites[spriten].scratchX+240, 180-sprites[spriten].scratchY);
		penctx.lineTo(sprites[spriten].scratchX+x+240, 180-sprites[spriten].scratchY);
		penctx.stroke();
	}
	sprites[spriten].scratchX += x;
}

function scratchGotoY(spriten, y) {
	if (specialproperties[spriten].pendown) {
		penctx.beginPath();
		penctx.moveTo(sprites[spriten].scratchX+240, 180-sprites[spriten].scratchY);
		penctx.lineTo(sprites[spriten].scratchX+240, 180-y);
		penctx.stroke();
	}
	sprites[spriten].scratchY = y;
}

function scratchChangeY(spriten, y) {
	if (specialproperties[spriten].pendown) {
		penctx.beginPath();
		penctx.moveTo(sprites[spriten].scratchX+240, 180-sprites[spriten].scratchY);
		penctx.lineTo(sprites[spriten].scratchX+240, 180-sprites[spriten].scratchY+y);
		penctx.stroke();
	}
	sprites[spriten].scratchY += y;
}

function scratchFilterReset(spriten) {
	specialproperties[spriten].effects['ghost'] = 0;
}

function scratchGraphicEffect(spriten, type, value) {
	specialproperties[spriten].effects[type] = value;
	if (type == "ghost") specialproperties[spriten].effects[type] = Math.min(Math.max(0, specialproperties[spriten].effects[type]), 100);
}

function scratchSay(spriten, value) {
	specialproperties[spriten].say = String(value);
	specialproperties[spriten].think = false;
}

function scratchAsk(spriten, value) {
	specialproperties[spriten].say = String(value);
	specialproperties[spriten].think = false;
	specialproperties[spriten].ask = true;
}

function scratchThink(spriten, value) {
	specialproperties[spriten].say = String(value);
	specialproperties[spriten].think = true;
}

function scratchChangeGraphicEffect(spriten, type, value) {
	specialproperties[spriten].effects[type] += value;
	if (type == "ghost") specialproperties[spriten].effects[type] = Math.min(Math.max(0, specialproperties[spriten].effects[type]), 100);
}

function scratchPlaySound(spriten, name) {
	if (spriten != "stage") {
	
	if (typeof sprites[spriten].sounds != 'undefined') {

	var id = soundIndex[spriten].indexOf(name);

	if (id != -1) {
		try {
		audio[sprites[spriten].sounds[id].soundID].currentTime = 0.0;
		audio[sprites[spriten].sounds[id].soundID].play();
		} catch(err) {
		log("Fatal Error Playing "+name+", probably unsupported codec");
		return;
		}
		return;
	}

	}

	}

	id = globalsoundIndex.indexOf(name);

	if (id != -1) {
		try {
		audio[project.sounds[id].soundID].currentTime = 0.0;
		audio[project.sounds[id].soundID].play();
		return;
		} catch(err) {
		log("Fatal Error Playing "+name+", probably unsupported codec");
		return;
		}
	}

	if (Number(name) != NaN) {

		if (spriten != "stage") {

		if (soundIndex[spriten].length >= name) {
			try {
			audio[sprites[spriten].sounds[name].soundID].currentTime = 0.0;
			audio[sprites[spriten].sounds[name].soundID].play();
			return;
			} catch(err) {
			log("Fatal Error Playing "+name+", probably unsupported codec");
			return;
			}
		}
		
		}

		if (globalsoundIndex.length >= name) {
			try {
			audio[project.sounds[name].soundID].currentTime = 0.0;
			audio[project.sounds[name].soundID].play();
			return;
			} catch(err) {
			log("Fatal Error Playing "+name+", probably unsupported codec");
			return;
			}
		}

	}

	log("Cannot play sound '"+name+"', does not exist!");
}

function scratchColorCollision(spriten, target) {

 	target = (16777216 + target).toString(16);
	for (cl=0;cl<(6-target.length);i++) {
		target = "0"+target;
	}

	var targetr = parseInt(target.substr(0,2), 16)
	var targetg = parseInt(target.substr(2,2), 16)
	var targetb = parseInt(target.substr(4,2), 16)

	colcanvas.width = 480;
	colcanvas.height = 360;

	var costume = project.costumes[project.currentCostumeIndex];
	colctx.drawImage(images[costume.baseLayerID], (0-costume.rotationCenterX)+240, (0-costume.rotationCenterY)+180);

	colctx.drawImage(pencanvas, 0, 0);
	colctx.drawImage(sprcanvas, 0, 0);

	var costume = sprites[spriten].costumes[sprites[spriten].currentCostumeIndex];

	var colourcheck = colctx.getImageData(Math.round(240+sprites[spriten].scratchX)-costume.rotationCenterX, Math.round(180-sprites[spriten].scratchY)-costume.rotationCenterY, images[costume.baseLayerID].width, images[costume.baseLayerID].height);

	colcanvas.width = images[costume.baseLayerID].width;
	colcanvas.height = images[costume.baseLayerID].height;

	colctx.drawImage(images[costume.baseLayerID], 0, 0);
	
	var colourcheck2 = colctx.getImageData(0, 0, colcanvas.width, colcanvas.height);

	var cwidth = colcanvas.width;
	var cheight = colcanvas.height;

	for (var x=0;x<cwidth;x++) {
		for (var y=0;y<cheight;y++) {
			if ((colourcheck2.data[(x+y*cwidth)*4+3] != 0) && (colourcheck.data[(x+y*cwidth)*4] == targetr) && (colourcheck.data[(x+y*cwidth)*4+1] == targetg) && (colourcheck.data[(x+y*cwidth)*4+2] == targetb)) return true;
		}
	}

	return false;

}

function scratchCollisionDetect(spriten, name) {
	if (!(sprites[spriten].visible)) return false;

	if (name == '_mouse_') {

		var costume = sprites[spriten].costumes[sprites[spriten].currentCostumeIndex];

		if ((MouseX > (sprites[spriten].scratchX-costume.rotationCenterX)+images[costume.baseLayerID].width) || (MouseX < (sprites[spriten].scratchX-costume.rotationCenterX)+images[costume.baseLayerID].width) || (MouseY > (sprites[spriten].scratchY+costume.rotationCenterY)+images[costume.baseLayerID].height) || (MouseY < (sprites[spriten].scratchY+costume.rotationCenterY)+images[costume.baseLayerID].height)) return false;

		colcanvas.width = images[costume.baseLayerID].width;
		colcanvas.height = images[costume.baseLayerID].height;

		colctx.drawImage(images[costume.baseLayerID], 0, 0);
	
		var colourcheck2 = colctx.getImageData(0, 0, colcanvas.width, colcanvas.height);

		if (colourcheck2.data[(MouseX-(sprites[spriten].scratchX-costume.rotationCenterX)+((sprites[spriten].scratchY+costume.rotationCenterX)-MouseY)*colcanvas.width)*4+3] != 0) return true;
		else return false;
	}

	for (i=0;i<sprites.length;i++) {
		if (sprites[i].objName == name) {
			var othersprite = i;
		}
	}

	if (othersprite == undefined) return false;

	if (!(sprites[othersprite].visible)) return false;
	
	var costume = sprites[spriten].costumes[sprites[spriten].currentCostumeIndex];
	var x1 = (sprites[spriten].scratchX+240)-costume.rotationCenterX
	var y1 = (180-sprites[spriten].scratchY)-costume.rotationCenterY
	var xm1 = ((sprites[spriten].scratchX+240)-costume.rotationCenterX)+images[costume.baseLayerID].width;
	var ym1 = ((180-sprites[spriten].scratchY)-costume.rotationCenterY)+images[costume.baseLayerID].height;

	var costume = sprites[othersprite].costumes[sprites[othersprite].currentCostumeIndex];
	var x2 = (sprites[othersprite].scratchX+240)-costume.rotationCenterX
	var y2 = (180-sprites[othersprite].scratchY)-costume.rotationCenterY
	var xm2 = ((sprites[othersprite].scratchX+240)-costume.rotationCenterX)+images[costume.baseLayerID].width;
	var ym2 = ((180-sprites[othersprite].scratchY)-costume.rotationCenterY)+images[costume.baseLayerID].height;

	if ((x1 > xm2) || (x2 > xm1) || (y1 > ym2) || (y2 > ym1)) return false;

	var xstart = Math.max(x1, x2);
	var xend = Math.min(xm1, xm2);
	var ystart = Math.max(y1, y2);
	var yend = Math.min(ym1, ym2);

	colcanvas.width = 480;
	colcanvas.height = 360;

	colctx.clearRect(0, 0, 480, 360);	

	scratchDrawSprite(colctx, spriten);

	var colourcheck = colctx.getImageData(xstart, xend, Math.max(1, xend-xstart), Math.max(1, yend-ystart));


	colctx.clearRect(0, 0, 480, 360);	

	scratchDrawSprite(colctx, othersprite);

	var colourcheck2 = colctx.getImageData(xstart, xend, Math.max(1, xend-xstart), Math.max(1, yend-ystart));

	var cwidth = colcanvas.width;
	var cheight = colcanvas.height;

	for (var x=0;x<cwidth;x++) {
		for (var y=0;y<cheight;y++) {
			if ((colourcheck.data[(x+y*cwidth)*4+3] != 0) && (colourcheck2.data[(x+y*cwidth)*4+3] != 0)) return true;
		}
	}

	return false;

}

function scratchDrawSprite(thectx, sprdraw) {

	thectx.save();
	var costume = sprites[sprdraw].costumes[sprites[sprdraw].currentCostumeIndex];
	var costdir = (sprites[sprdraw].direction-90) * Math.PI / 180;
			
	thectx.translate(Math.round(sprites[sprdraw].scratchX)+240, 180-Math.round(sprites[sprdraw].scratchY));
	thectx.rotate(costdir);
	thectx.scale(sprites[sprdraw].scale, sprites[sprdraw].scale);

	thectx.drawImage(images[costume.baseLayerID], -costume.rotationCenterX, -costume.rotationCenterY);
			

	if (typeof costume.text != 'undefined') {

		if (costume.textLayerID != -1) {
		
			thectx.drawImage(images[costume.textLayerID], -costume.rotationCenterX, -costume.rotationCenterY);

		}
	
	}
	thectx.restore();

}

function scratchColorCollision2(spriten, target1, target2) {

 	target1 = (16777216 + target1).toString(16);
	for (cl=0;cl<(6-target1.length);i++) {
		target1 = "0"+target1;
	}

	var targetr = parseInt(target1.substr(0,2), 16)
	var targetg = parseInt(target1.substr(2,2), 16)
	var targetb = parseInt(target1.substr(4,2), 16)


 	target2 = (16777216 + target2).toString(16);
	for (cl=0;cl<(6-target2.length);i++) {
		target2 = "0"+target2;
	}

	var target2r = parseInt(target2.substr(0,2), 16)
	var target2g = parseInt(target2.substr(2,2), 16)
	var target2b = parseInt(target2.substr(4,2), 16)

	colcanvas.width = 480;
	colcanvas.height = 360;

	var costume = project.costumes[project.currentCostumeIndex];
	colctx.drawImage(images[costume.baseLayerID], (0-costume.rotationCenterX)+240, (0-costume.rotationCenterY)+180);

	colctx.drawImage(pencanvas, 0, 0);
	colctx.drawImage(sprcanvas, 0, 0);

	var costume = sprites[spriten].costumes[sprites[spriten].currentCostumeIndex];

	var colourcheck = colctx.getImageData(Math.round(240+sprites[spriten].scratchX)-costume.rotationCenterX, Math.round(180-sprites[spriten].scratchY)-costume.rotationCenterY, images[costume.baseLayerID].width, images[costume.baseLayerID].height);

	colcanvas.width = images[costume.baseLayerID].width;
	colcanvas.height = images[costume.baseLayerID].height;

	colctx.drawImage(images[costume.baseLayerID], 0, 0);
	
	var colourcheck2 = colctx.getImageData(0, 0, colcanvas.width, colcanvas.height);

	var cwidth = colcanvas.width;
	var cheight = colcanvas.height;

	for (var x=0;x<cwidth;x++) {
		for (var y=0;y<cheight;y++) {
			if ((colourcheck2.data[(x+y*cwidth)*4+3] != 0) && (colourcheck2.data[(x+y*cwidth)*4] == targetr) && (colourcheck2.data[(x+y*cwidth)*4+1] == targetg) && (colourcheck2.data[(x+y*cwidth)*4+2] == targetb) && (colourcheck.data[(x+y*cwidth)*4] == target2r) && (colourcheck.data[(x+y*cwidth)*4+1] == target2g) && (colourcheck.data[(x+y*cwidth)*4+2] == target2b)) return true;
		}
	}

	return false;

}

// ----- SCRATCH PEN BLOCKS -----

function scratchClearPen() {
	penctx.clearRect(0, 0, 480, 360);
}

function scratchPenDot(spriten) {
	penctx.lineCap = "round";
	penctx.beginPath();
	penctx.lineWidth = specialproperties[spriten].pensize;
	penctx.strokeStyle = specialproperties[spriten].color;
	penctx.moveTo(sprites[spriten].scratchX+240, 180-sprites[spriten].scratchY); 
	penctx.lineTo(sprites[spriten].scratchX+240.1, 180-sprites[spriten].scratchY);
	penctx.stroke();
}


function scratchSetPenColor(spriten, value) {
	specialproperties[spriten].penhue = value*360/200;
	specialproperties[spriten].penhue = scratchMod(specialproperties[spriten].penhue, 360);
	specialproperties[spriten].pensaturation = 100;
	specialproperties[spriten].color = "hsl("+specialproperties[spriten].penhue+", "+specialproperties[spriten].pensaturation+"%, "+specialproperties[spriten].penlightness+"%)";

}

function scratchSetPenShade(spriten, value) {
	specialproperties[spriten].penlightness = value;
	specialproperties[spriten].penlightness = Math.min(Math.max(specialproperties[spriten].penlightness, 0), 100);
	specialproperties[spriten].pensaturation = 100;
	specialproperties[spriten].color = "hsl("+specialproperties[spriten].penhue+", "+specialproperties[spriten].pensaturation+"%, "+specialproperties[spriten].penlightness+"%)";
}

function scratchChangePenColor(spriten, value) {
	specialproperties[spriten].penhue += value*360/200;
	specialproperties[spriten].penhue = scratchMod(specialproperties[spriten].penhue, 360);
	specialproperties[spriten].pensaturation = 100;
	specialproperties[spriten].color = "hsl("+specialproperties[spriten].penhue+", "+specialproperties[spriten].pensaturation+"%, "+specialproperties[spriten].penlightness+"%)";
}

function scratchChangePenShade(spriten, value) {
	specialproperties[spriten].penlightness += value;
	specialproperties[spriten].penlightness = Math.min(Math.max(specialproperties[spriten].penlightness, 0), 100);
	specialproperties[spriten].pensaturation = 100;
	specialproperties[spriten].color = "hsl("+specialproperties[spriten].penhue+", "+specialproperties[spriten].pensaturation+"%, "+specialproperties[spriten].penlightness+"%)";
}

function scratchPenColor(spriten, value) {
 	value = (16777216 + value).toString(16);

	for (cl=0;cl<(6-value.length);i++) {
		value = "0"+value;
	}

	var r = parseInt(value.substr(0,2), 16);
	var g = parseInt(value.substr(2,2), 16);
	var b = parseInt(value.substr(4,2), 16);


	specialproperties[spriten].penhue = computeHue(r, g, b)*180/Math.PI;
	specialproperties[spriten].pensaturation = computeSaturation(r, g, b);
	specialproperties[spriten].penlightness = computeLightness(r, g, b);

	specialproperties[spriten].color = "hsl("+specialproperties[spriten].penhue+", "+specialproperties[spriten].pensaturation+"%, "+specialproperties[spriten].penlightness+"%)";

	//alert(specialproperties[spriten].color)

	penctx.strokeStyle = specialproperties[spriten].color;
}

function scratchPenSize(spriten, value) {
 	specialproperties[spriten].pensize = Math.max(Math.round(value), 1);
	penctx.lineWidth = specialproperties[spriten].pensize;
}

function scratchStamp(spriten) {

	penctx.save();
	var costume = sprites[spriten].costumes[sprites[spriten].currentCostumeIndex];
	var costdir = (sprites[spriten].direction-90) * Math.PI / 180;
			
	penctx.translate(Math.round(sprites[spriten].scratchX)+240, 180-Math.round(sprites[spriten].scratchY));

	if (sprites[spriten].rotationStyle == "normal"){
		penctx.rotate(costdir);
		penctx.scale(Math.abs(sprites[spriten].scale), Math.abs(sprites[spriten].scale));
	} else if (sprites[spriten].rotationStyle == "leftRight") {
		if (sprites[spriten].direction > 0) penctx.scale(Math.abs(sprites[spriten].scale), Math.abs(sprites[spriten].scale));
		if (sprites[spriten].direction < 0)	penctx.scale(Math.abs(sprites[spriten].scale)*-1, Math.abs(sprites[spriten].scale));
	}


	penctx.drawImage(images[costume.baseLayerID], -costume.rotationCenterX, -costume.rotationCenterY);
			

	if (typeof costume.text != 'undefined') {

		if (costume.textLayerID != -1) {
		
			penctx.drawImage(images[costume.textLayerID], -costume.rotationCenterX, -costume.rotationCenterY);

		}
	
	}
	penctx.restore();
}

// END SCRATCH BLOCKS


totalfiles = 7;
loaded = 0;

function drawProgress() {
	baranim += 1;
	framectx.clearRect(0, 0, 486, 391);
	framectx.drawImage(frame, 0, 0);
	framectx.drawImage(preload, 3, 28);
	//framectx.fillStyle = "#FF9900";
    	//framectx.font = "6pt Arial";
	//var textmeasure = framectx.measureText(LoadBytes+" / "+LoadTotal);
	//var textmeasure = 20;
	//framectx.fillText(LoadBytes+" / "+LoadTotal, (143+100)-(textmeasure/2), 270-2);
	//var textmeasure = framectx.measureText(LoadProgress+"%");
	//framectx.textBaseline = "top";
	//framectx.fillText(LoadProgress+"%", (143+100)-(textmeasure/2), 251-2);
	barctx.drawImage(bar, -50+baranim%50, 0);
    	barctx.font = "6pt Arial";
	//barctx.textBaseline = "top";
	//barctx.fillStyle = "#FFFFFF";
	//barctx.fillText(LoadProgress+"%", 100-(textmeasure/2), -2);
	barctx.clearRect(199-Math.round((100-LoadProgress)*1.98),1,Math.round((100-LoadProgress)*1.98),6);
	framectx.drawImage(barcanvas, 143, 251);
}

function IncLoad() {
	loaded += 1;
	if (loaded == totalfiles) {
		framectx.drawImage(frame, 0, 0)
	}
}

window.onload = init;

function renderSVGs() {
	svgcanvas = document.createElement("canvas");
	svgctx = canvas.getContext("2d");

		for (i=0;i<svgs.length;i++) {
			var imagenum = svgnums[i];
			canvg(svgcanvas, svgs[i]);
			images[imagenum] = new Image();
			images[imagenum].src = svgcanvas.toDataURL()
			document.getElementById('test2').innerHTML += "<img src='"+ images[imagenum].src +"'>"
		}

}

function keyPress(evt) {


	if (focus) {


		if (evt.keyCode == 96) {

			if (console) console = false;
			else console = true;
	
		}
	/*
		//alert (evt.keyCode);
	
		for (j=0;j<keyPressScripts[evt.keyCode].length;j++) {
			if (String(keyPressScripts[evt.keyCode][j]).substr(0, 8) == "function") {
				keyPressScripts[evt.keyCode][j] = String(keyPressScripts[evt.keyCode][j]).substr(14, String(keyPressScripts[evt.keyCode][j]).length-15);
			}
			eval(keyPressScripts[evt.keyCode][j]);
		}
	*/
	}

}

function keyDown(evt) {
	if (focus) {

		/*
		if ((evt.keyCode >= 37) && (evt.keyCode <= 40)) {

			for (j=0;j<keyPressScripts[evt.keyCode].length;j++) {
				eval(String(keyPressScripts[evt.keyCode][j]).substr(14, String(keyPressScripts[evt.keyCode][j]).length-15));
			}

		}
		*/

		keyDownArray[evt.keyCode] = true;

		for (spr=0;spr<sprites.length;spr++) {
			for (j=0;j<scripts[spr]['keyPress'][evt.keyCode].length;j++) {
				eval(scripts[spr]['keyPress'][evt.keyCode][j]);
			}
		}

	}
}

function keyUp(evt) {
	if (focus) {

		keyDownArray[evt.keyCode] = false;

	}
}

function getMousePosition(evt) {
	el = framecanvas

	var _x = 0;
	var _y = 0;

    while( el && !isNaN( el.offsetLeft ) && !isNaN( el.offsetTop ) ) {
       	_x += el.offsetLeft - el.scrollLeft;
        _y += el.offsetTop - el.scrollTop;
        el = el.offsetParent;
    }


	MouseX = (evt.pageX - _x)-241;
	MouseY = 206 - (evt.pageY - _y);


}

function mouseDown(evt) {

	scratchMouseDown = true;

	if (loadedb) {

	if ((MouseX > 180) && (MouseX < 206) && (MouseY < 205) && (MouseY > 184)) {
		stopAll();
		execGreenFlag();
	}

	if ((MouseX > 215) && (MouseX < 235) && (MouseY < 205) && (MouseY > 184)) {
		stopAll();
	}

	}
}

function mouseUp(evt) {

	scratchMouseDown = false;

}

function init() {

	scratchMouseDown = false;

	console = false;
	consolelog = new Array();

	log("sb2.js by RHY3756547");
	log("Development Version");
	log("-----------------------------");
	log(" ");

	baranim = 0;

	focussteal = document.getElementById('scratch');

	loadedb = new Boolean(false);

	keyDownArray = new Array();
	for (i=0;i<256;i++){
		keyDownArray[i] = false;
	}
	document.onkeydown=keyDown;
	document.onkeypress=keyPress;
	document.onkeyup=keyUp;

	parent.window.onmousedown = function(evt) {
		focus = 0;
	};


	MouseX = 0;
	MouseY = 0;

	framecanvas = document.getElementById('scratch');
    	framectx = framecanvas.getContext('2d');

	barcanvas = document.createElement("canvas");
	barcanvas.width = 200;
	barcanvas.height = 8;
    	barctx = barcanvas.getContext('2d');

	framecanvas.onmouseup = function(evt) {
		focus = 1;
	};

	framecanvas.onmousedown = mouseDown;
	document.onmouseup = mouseUp;
	framecanvas.onmousemove = getMousePosition;

	frame = new Image();
	frame.src = "frame.png"
	frame.onload = IncLoad;

	bar = new Image();
	bar.src = "bar.png"
	bar.onload = IncLoad;

	greenflagn = new Image();
	greenflagn.src = "greenflag.png"
	greenflagn.onload = IncLoad;

	greenflaga = new Image();
	greenflaga.src = "greenflaga.png"
	greenflaga.onload = IncLoad;

	stopn = new Image();
	stopn.src = "stop.png"
	stopn.onload = IncLoad;

	stopa = new Image();
	stopa.src = "stopa.png"
	stopa.onload = IncLoad;

	preload = new Image();
	preload.src = "preloader.png"
	preload.onload = IncLoad;

}


function blockHandler(block, reporter) {


	if (!reporter) {
		if (!(Object.prototype.toString.call( block ) === '[object Array]')) { //; //if it's not a list then it's not a block, it's actually a string
			block = [block];
		}
	}

	//alert(block[0]);

	if (!reporter || (Object.prototype.toString.call( block ) === '[object Array]')){
		var j=0;
		var f=0;
		if (!reporter) {
			if (block[0] == "whenGreenFlag") {

				/*

				if (spritenum == -1) {
					scripttext += "stageGreenflag[stageGreenflag.length] = function() { ";
				} else {
					scripttext += "greenflag[spr][greenflag[spr].length] = function() { ";
				}

				*/

				scripts[spritenum]['greenFlag'][scripts[spritenum]['greenFlag'].length] = scripttext.length;


				greenflaglength += 1;
				for (j=1;j<block.length;j++){
					ifLoopVar.push(j);
					blockHandler(block[j], false);
					j = ifLoopVar.pop();
				}
				//scripttext += " }; ";

			} else if (block[0][0] == "whenIReceive") {

				if (scripts[spritenum]['broadcast'][block[0][1]] == undefined) {
					scripts[spritenum]['broadcast'][block[0][1]] = new Array();
					broadcastArgs.push(block[0][1]);
				}

				scripts[spritenum]['broadcast'][block[0][1]][scripts[spritenum]['broadcast'][block[0][1]].length] = scripttext.length;


				for (j=1;j<block.length;j++){
					ifLoopVar.push(j);
					blockHandler(block[j], false);
					j = ifLoopVar.pop();
				}

			} else if (block[0] == "wait:elapsed:from:") {
	
				/*
				scripttext += "foreverstatus[spr][foreverstatus[spr].length] = 'halt'; ";
				scripttext += "waittimes[spr][waittimes[spr].length] = ";
				blockHandler(block[1], true);
				scripttext += "; wait[spr][wait[spr].length] = function() { ";
				scripttext += "foreverstatus[spr][foreverstatus[spr].length] = 'exec'; ";	
				extrabrackets += 1;
				*/

				scripttext += "scratchAddExecution(spr, 'wait', "+scripts[spritenum]['wait'].length+", ";
				blockHandler(block[1], true);
				scripttext += "); return; ";
				scripts[spritenum]['wait'][scripts[spritenum]['wait'].length] = scripttext.length;

			} else if (block[0] == "doRepeat") {


				/*
				if foreverlength > 1)
				scripttext += "foreverstatus[spr][foreverstatus[spr].length] = 'halt'; ";
				scripttext += "repeattimes[spr][repeattimes[spr].length] = Math.round(";
				blockHandler(block[1], true);
				scripttext += "); repeat[spr][repeat[spr].length] = function() { ";
				*/



				scripttext += "scratchAddExecution(spr, 'repeat', "+scripts[spritenum]['repeat'].length+", 0, ";
				blockHandler(block[1], true);
				scripttext += "); return; ";
				ifLoopVar.push(scripts[spritenum]['repeat'].length);
				scripts[spritenum]['repeat'][scripts[spritenum]['repeat'].length] = scripttext.length;

				//scripttext += "for (j=0;j<(";
				//blockHandler(block[1], true);

				scripttext += "repeatStack.push(q); ";

				if (block[2] != null) {

				for (j=0;j<block[2].length;j++){
					ifLoopVar.push(j);
					blockHandler(block[2][j], false);
					j = ifLoopVar.pop();
				}

				}

				scripttext += "var tempq = repeatStack.pop(); executionQueue[spr][tempq].repeatNum -= 1; if (0 < executionQueue[spr][tempq].repeatNum) { "

				scripttext += "scratchAddExecution(spr, 'repeat', "+ifLoopVar.pop()+", 1, executionQueue[spr][tempq].repeatNum); return; }";


				//scripttext += "j = repeatStack.pop(); }";

				//document.getElementById('test2').innerHTML += "<br>repeat snapshot</br>"+scripttext+"<br>/repeat snapshot</br>"

				/*
				scripttext += "repeattimes[spr][repeatnum] -= 1;"
				scripttext += "if (repeattimes[spr][repeatnum] > 0) return; "
				scripttext += "foreverstatus[spr][foreverstatus[spr].length] = 'exec'; ";
				extrabrackets += 1;
				*/

			} else if (block[0] == "doUntil") {



				scripttext += "scratchAddExecution(spr, 'repeat', "+scripts[spritenum]['repeat'].length+", 0";
				scripttext += "); return; ";
				ifLoopVar.push(scripts[spritenum]['repeat'].length);
				scripts[spritenum]['repeat'][scripts[spritenum]['repeat'].length] = scripttext.length;

				scripttext += "if (!("

				blockHandler(block[1], true);

				scripttext += ")) {"		

				for (j=0;j<block[2].length;j++){
					ifLoopVar.push(j);
					blockHandler(block[2][j], false);
					j = ifLoopVar.pop();
				}

				scripttext += " } if (!("

				blockHandler(block[1], true);		

				scripttext += ")) { scratchAddExecution(spr, 'repeat', "+ifLoopVar.pop()+", 1); return; }";

			} else if (block[0] == "doWaitUntil") {

				//just a repeat with no content - aren't i cunning :>

				scripttext += "scratchAddExecution(spr, 'repeat', "+scripts[spritenum]['repeat'].length+", 0";
				scripttext += "); return; ";
				ifLoopVar.push(scripts[spritenum]['repeat'].length);
				scripts[spritenum]['repeat'][scripts[spritenum]['repeat'].length] = scripttext.length;

				scripttext += "if (!("

				blockHandler(block[1], true);		

				scripttext += ")) { scratchAddExecution(spr, 'repeat', "+ifLoopVar.pop()+", 1); return; }";


			} else if (block[0][0] == "whenKeyPressed") {

				scripts[spritenum]['keyPress'][scratchParseCharCode(block[0][1])][scripts[spritenum]['keyPress'][scratchParseCharCode(block[0][1])].length] = scripttext.length;

				for (j=1;j<block.length;j++){
					ifLoopVar.push(j);
					blockHandler(block[j], false);
					j = ifLoopVar.pop();
				}



			} else if (block[0] == "doForever") {

				/*

				if (spritenum == -1) {
					scripttext += "stageForever[stageForever.length] = function() { ";
				} else {
					scripttext += "foreverstatus[spr][foreverstatus[spr].length] = 'exec'; ";
					scripttext += "forever[spr][forever[spr].length] = function() { ";
				}

				*/

				scripttext += "scratchAddExecution(spr, 'forever', "+scripts[spritenum]['forever'].length+", 0); return; ";

				ifLoopVar.push(scripts[spritenum]['forever'].length);

				scripts[spritenum]['forever'][scripts[spritenum]['forever'].length] = scripttext.length;

				
				foreverlength += 1;
				for (f=0;f<block[1].length;f++){
					ifLoopVar.push(f);
					blockHandler(block[1][f], false);
					f = ifLoopVar.pop();
				}

				scripttext += "scratchAddExecution(spr, 'forever', "+ifLoopVar.pop()+", 1); return; ";

			} else if (block[0] == "broadcast:") {

				scripttext += "scratchAddExecution(spr, 'broadcast', ";
				blockHandler(block[1], true);
				scripttext += ", 1);";

			} else if (block[0] == "doIf") {

				scripttext += "if (";
				blockHandler(block[1], true);
				scripttext += ") { ";

				if (block[2] != null) {
				for (j=0;j<block[2].length;j++){
					ifLoopVar.push(j);
					blockHandler(block[2][j], false);
					j = ifLoopVar.pop();
				}
				}
				scripttext += " } ";


			} else if (block[0] == "doIfElse") {

				scripttext += "if (";
				blockHandler(block[1], true);
				scripttext += " ) { ";

				if (block[2] != null) {
				for (j=0;j<block[2].length;j++){
					ifLoopVar.push(j);
					blockHandler(block[2][j], false);
					j = ifLoopVar.pop();
				}
				}



				scripttext += " } else { ";
				if (block[3] != null) {
				for (j=0;j<block[3].length;j++){
					ifLoopVar.push(j);
					blockHandler(block[3][j], false);
					j = ifLoopVar.pop();
				}
				}
				scripttext += " } ";

			} else if (block[0] == "setVar:to:") {

				scripttext += "scratchSetVar(spr, ";
				blockHandler(block[1], true);
				scripttext += ", ";
				blockHandler(block[2], true);
				scripttext += "); ";

			} else if (block[0] == "changeVar:by:") {

				scripttext += "scratchChangeVar(spr, ";
				blockHandler(block[1], true);
				scripttext += ", ";
				blockHandler(block[2], true);
				scripttext += "); ";

			} else if (block[0] == "pointTowards:") {

				scripttext += "scratchPointTowards(spr, ";
				blockHandler(block[1], true);
				scripttext += "); ";

			} else if (block[0] == "filterReset") {

				scripttext += "scratchFilterReset(spr); ";

			} else if (block[0] == "forward:") {

				scripttext += "scratchStep(spr, ";
				blockHandler(block[1], true);
				scripttext += "); ";

			} else if (block[0] == "gotoSpriteOrMouse:") {

				scripttext += "scratchGotoSprite(spr, ";
				blockHandler(block[1], true);
				scripttext += "); ";

			} else if (block[0] == "lookLike:") {

				scripttext += "scratchSetCostume(spr, ";
				blockHandler(block[1], true);
				scripttext += "); ";

			} else if (block[0] == "append:toList:") {

				scripttext += "scratchAppendList(spr, ";
				blockHandler(block[1], true);
				scripttext += ", ";
				blockHandler(block[2], true);
				scripttext += "); ";

			} else if (block[0] == "deleteLine:ofList:") {

				scripttext += "scratchDeleteList(spr, ";
				blockHandler(block[1], true);
				scripttext += ", ";
				blockHandler(block[2], true);
				scripttext += "); ";

			} else if (block[0] == "setLine:ofList:to:") {

				scripttext += "scratchReplaceList(spr, ";
				blockHandler(block[3], true);
				scripttext += ", ";
				blockHandler(block[1], true);
				scripttext += ", ";
				blockHandler(block[2], true);
				scripttext += "); ";

			} else if (block[0] == "timerReset") {

				scripttext += "scratchTimeStart = new Date().getTime(); ";

			} else if (block[0] == "clearPenTrails") {

				scripttext += "scratchClearPen(); "

			} else if (block[0] == "putPenDown") {

				scripttext += "specialproperties[spr].pendown = true; scratchPenDot(spr); ";

			} else if (block[0] == "putPenUp") {

				scripttext += "specialproperties[spr].pendown = false; ";

			} else if (block[0] == "stopAllSounds") {

				scripttext += "scratchStopAllSounds(); "

			} else if (block[0] == "stopAll") {

				scripttext += "stopAll(); return;"


			} else if (block[0] == "stampCostume") {

				scripttext += "scratchStamp(spr); "

			} else if (block[0] == "setSizeTo:") {

				scripttext += "sprites[spr].scale = (";
				blockHandler(block[1], true);
				scripttext += ")/100; ";

			} else if (block[0] == "changeSizeBy:") {

				scripttext += "sprites[spr].scale += (";
				blockHandler(block[1], true);
				scripttext += ")/100; ";

			} else if (block[0] == "gotoX:y:") {
				
				scripttext += "scratchGotoXY(spr, ";
				blockHandler(block[1], true);
				scripttext += ", ";
				blockHandler(block[2], true);
				scripttext += "); ";

			} else if (block[0] == "changeXposBy:") {
				
				scripttext += "scratchChangeX(spr, ";
				blockHandler(block[1], true);
				scripttext += "); ";

			} else if (block[0] == "penColor:") {
				
				scripttext += "scratchPenColor(spr, ";
				blockHandler(block[1], true);
				scripttext += "); ";

			} else if (block[0] == "changePenHueBy:") {
				
				scripttext += "scratchChangePenColor(spr, ";
				blockHandler(block[1], true);
				scripttext += "); ";


			} else if (block[0] == "setPenHueTo:") {
				
				scripttext += "scratchSetPenColor(spr, ";
				blockHandler(block[1], true);
				scripttext += "); ";

			} else if (block[0] == "changePenShadeBy:") {
				
				scripttext += "scratchChangePenShade(spr, ";
				blockHandler(block[1], true);
				scripttext += "); ";


			} else if (block[0] == "setPenShadeTo:") {
				
				scripttext += "scratchSetPenShade(spr, ";
				blockHandler(block[1], true);
				scripttext += "); ";


			} else if (block[0] == "penSize:") {
				
				scripttext += "scratchPenSize(spr, ";
				blockHandler(block[1], true);
				scripttext += "); ";

			} else if (block[0] == "changeYposBy:") {
				
				scripttext += "scratchChangeY(spr, ";
				blockHandler(block[1], true);
				scripttext += "); ";

			} else if (block[0] == "xpos:") {
				
				scripttext += "scratchGotoX(spr, ";
				blockHandler(block[1], true);
				scripttext += "); ";

			} else if (block[0] == "ypos:") {
				
				scripttext += "scratchGotoY(spr, ";
				blockHandler(block[1], true);
				scripttext += "); ";

			} else if (block[0] == "say:") {
				
				scripttext += "scratchSay(spr, ";
				blockHandler(block[1], true);
				scripttext += "); ";

			} else if (block[0] == "think:") {
				
				scripttext += "scratchThink(spr, ";
				blockHandler(block[1], true);
				scripttext += "); ";

			} else if (block[0] == "doAsk:") {
				
				scripttext += "scratchAsk(spr, ";
				blockHandler(block[1], true);
				scripttext += "); ";

			} else if (block[0] == "show") {

				scripttext += "sprites[spr].visible = true; ";

			} else if (block[0] == "hide") {

				scripttext += "sprites[spr].visible = false; ";


			} else if (block[0] == "setGraphicEffect:to:") {

				scripttext += "scratchGraphicEffect(spr, ";
				blockHandler(block[1], true);
				scripttext += ", ";
				blockHandler(block[2], true);
				scripttext += "); ";

			} else if (block[0] == "changeGraphicEffect:by:") {

				scripttext += "scratchChangeGraphicEffect(spr, ";
				blockHandler(block[1], true);
				scripttext += ", ";
				blockHandler(block[2], true);
				scripttext += "); ";

			} else if (block[0] == "playSound:") {

				scripttext += "scratchPlaySound(spr, ";
				blockHandler(block[1], true);
				scripttext += "); ";

			} else if (block[0] == "turnRight:") {

				scripttext += "sprites[spr].direction += ";
				blockHandler(block[1], true);
				scripttext += "; ";
				scripttext += "sprites[spr].direction = ((sprites[spr].direction+180)%360)-180; ";


			} else if (block[0] == "heading:") {

				scripttext += "sprites[spr].direction = ";
				blockHandler(block[1], true);
				scripttext += "; ";
				scripttext += "if (sprites[spr].direction < -180) sprites[spr].direction += 360*Math.ceil((sprites[spr].direction+180)/-360); ";
				scripttext += "sprites[spr].direction = ((sprites[spr].direction+180)%360)-180; ";


			} else if (block[0] == "turnLeft:") {

				scripttext += "sprites[spr].direction -= ";
				blockHandler(block[1], true);
				scripttext += "; ";
				scripttext += "if (sprites[spr].direction < -180) sprites[spr].direction += 360*Math.ceil((sprites[spr].direction+180)/-360); ";
				scripttext += "sprites[spr].direction = ((sprites[spr].direction+180)%360)-180; ";
			}
		} else {

			if (block[0] == "readVariable") {

				scripttext += "scratchReadVar(spr, ";
				blockHandler(block[1], true);
				scripttext += ")";


			} else if (block[0] == "getLine:ofList:") {

				scripttext += "scratchReadList(spr, ";
				blockHandler(block[1], true);
				scripttext += ", ";
				blockHandler(block[2], true);
				scripttext += ")";


			} else if (block[0] == "lineCountOfList:") {

				scripttext += "scratchListLength(spr, ";
				blockHandler(block[1], true);
				scripttext += ")";

			} else if (block[0] == "getAttribute:of:") {

				scripttext += "scratchGetAttribute(";
				blockHandler(block[1], true);
				scripttext += ", ";
				blockHandler(block[2], true);
				scripttext += ")";

			} else if (block[0] == "list:contains:") {

				scripttext += "scratchListContains(spr, ";
				blockHandler(block[1], true);
				scripttext += ", ";
				blockHandler(block[2], true);
				scripttext += ")";


			} else if (block[0] == "computeFunction:of:") {

				scripttext += "scratchMathFunction(";
				blockHandler(block[1], true);
				scripttext += ", ";
				blockHandler(block[2], true);
				scripttext += ")";


			} else if (block[0] == "=") {

				scripttext += "(";
				blockHandler(block[1], true);
				scripttext += "== ";
				blockHandler(block[2], true);
				scripttext += ")";

			} else if (block[0] == ">") {

				scripttext += "(parseFloat(";
				blockHandler(block[1], true);
				scripttext += ") > parseFloat(";
				blockHandler(block[2], true);
				scripttext += "))";

			} else if (block[0] == "<") {

				scripttext += "(parseFloat(";
				blockHandler(block[1], true);
				scripttext += ") < parseFloat(";
				blockHandler(block[2], true);
				scripttext += "))";

			} else if (block[0] == "not") {

				scripttext += "(!";
				blockHandler(block[1], true);
				scripttext += ")";

			} else if (block[0] == "|") {

				scripttext += "(";
				blockHandler(block[1], true);
				scripttext += "|| ";
				blockHandler(block[2], true);
				scripttext += ")";

			} else if (block[0] == "&") {

				scripttext += "(";
				blockHandler(block[1], true);
				scripttext += "&& ";
				blockHandler(block[2], true);
				scripttext += ")";

			} else if (block[0] == "-") {

				scripttext += "(";
				blockHandler(block[1], true);
				scripttext += " - ";
				blockHandler(block[2], true);
				scripttext += ")";

			} else if (block[0] == "+") {

				scripttext += "(Number(";
				blockHandler(block[1], true);
				scripttext += ") + Number(";
				blockHandler(block[2], true);
				scripttext += "))";


			} else if (block[0] == "concatenate:with:") {

				scripttext += "(String(";
				blockHandler(block[1], true);
				scripttext += ") + String(";
				blockHandler(block[2], true);
				scripttext += "))";

			} else if (block[0] == "timer") {

				scripttext += "(((new Date().getTime()) - scratchTimeStart)/1000)";

			} else if (block[0] == "answer") {

				scripttext += "(scratchAnswer)";


			} else if (block[0] == "*") {

				scripttext += "(";
				blockHandler(block[1], true);
				scripttext += " * ";
				blockHandler(block[2], true);
				scripttext += ")";

			} else if (block[0] == "\\\\") {

				scripttext += "scratchMod(";
				blockHandler(block[1], true);
				scripttext += ", ";
				blockHandler(block[2], true);
				scripttext += ")";


			} else if (block[0] == "\/") {

				scripttext += "(";
				blockHandler(block[1], true);
				scripttext += " / ";
				blockHandler(block[2], true);
				scripttext += ")";


			} else if (block[0] == "rounded") {

				scripttext += "Math.round(";
				blockHandler(block[1], true);
				scripttext += ")";

			} else if (block[0] == "keyPressed:") {

				scripttext += "scratchKeyDown(";
				blockHandler(block[1], true);
				scripttext += ")";


			} else if (block[0] == "xpos") {

				scripttext += "sprites[spr].scratchX";

			} else if (block[0] == "randomFrom:to:") {

				scripttext += "scratchRandomFromTo(";
				blockHandler(block[1], true);
				scripttext += ", ";
				blockHandler(block[2], true);
				scripttext += ")";


			} else if (block[0] == "touchingColor:") {

				scripttext += "scratchColorCollision(spr, ";
				blockHandler(block[1], true);
				scripttext += ")";

			} else if (block[0] == "color:sees:") {

				scripttext += "scratchColorCollision2(spr, ";
				blockHandler(block[1], true);
				scripttext += ", ";
				blockHandler(block[2], true);
				scripttext += ")";

			} else if (block[0] == "stringLength:") {

				scripttext += "(String(";
				blockHandler(block[1], true);
				scripttext += ").length)";

			} else if (block[0] == "letter:of:") {

				scripttext += "(String(";
				blockHandler(block[2], true);
				scripttext += ").charAt(";
				blockHandler(block[1], true);
				scripttext += "-1))";

			} else if (block[0] == "touching:") {

				scripttext += "scratchCollisionDetect(spr, ";
				blockHandler(block[1], true);
				scripttext += ")";

			} else if (block[0] == "distanceTo:") {

				scripttext += "scratchDistance(spr, ";
				blockHandler(block[1], true);
				scripttext += ")";

			} else if (block[0] == "ypos") {

				scripttext += "sprites[spr].scratchY";

			} else {
				alert(block[0]);
			}
		}
	} else {
		if (typeof block == 'string') {
			scripttext += "'"+block+"'";
		} else {
			scripttext += block;
		}
	}
	return;

}


function log(value) {
	consolelog[consolelog.length] = value;
}

function stopAll() {

	active = false;

	scratchStopAllSounds();

	specialproperties = new Array(); 

	for (i=0;i<sprites.length;i++) {
		specialproperties[i] = new Object();
		specialproperties[i].pendown = Boolean(false);
		specialproperties[i].pensize = 1;
		specialproperties[i].color = "#000000";
		specialproperties[i].say = "";
		specialproperties[i].sayold = "";
		specialproperties[i].saylist = new Array();
		specialproperties[i].think = false;
		specialproperties[i].ask = false;
		specialproperties[i].effects = new Array();
		specialproperties[i].effects['ghost'] = 0;
	}

	forever = new Array();
	foreverstatus = new Array();
	wait = new Array();
	waittimes = new Array();
	repeat = new Array();
	repeattimes = new Array();

	stageForever = new Array();
	executionQueue = new Array();

	repeatStack = new Array();

	for (i=0;i<sprites.length;i++) {
		executionQueue[i] = new Array();
		executionQueue[i]['wait'] = new Array();
		executionQueue[i]['forever'] = new Array();
		executionQueue[i]['repeat'] = new Array();
		executionQueue[i]['broadcast'] = new Array();
		forever[i] = new Array();
		foreverstatus[i] = new Array();
		wait[i] = new Array();
		waittimes[i] = new Array();
		repeat[i] = new Array();
		repeattimes[i] = new Array();
	}
	executionQueue['stage'] = new Array();
	executionQueue['stage']['wait'] = new Array();
	executionQueue['stage']['forever'] = new Array();
	executionQueue['stage']['repeat'] = new Array();
	executionQueue['stage']['broadcast'] = new Array();


}

function execGreenFlag() {

	active = true;

	forever = new Array();
	foreverstatus = new Array();
	wait = new Array();
	waittimes = new Array();
	repeat = new Array();
	repeattimes = new Array();
	executionQueue = new Array();

	stageForever = new Array();

	scratchTimeStart = new Date().getTime();

	for (i=0;i<sprites.length;i++) {
		executionQueue[i] = new Array();
		executionQueue[i]['wait'] = new Array();
		executionQueue[i]['forever'] = new Array();
		executionQueue[i]['repeat'] = new Array();
		executionQueue[i]['broadcast'] = new Array();

		forever[i] = new Array();
		foreverstatus[i] = new Array();
		wait[i] = new Array();
		waittimes[i] = new Array();
		repeat[i] = new Array();
		repeattimes[i] = new Array();
	}
	executionQueue['stage'] = new Array();
	executionQueue['stage']['wait'] = new Array();
	executionQueue['stage']['forever'] = new Array();
	executionQueue['stage']['repeat'] = new Array();
	executionQueue['stage']['broadcast'] = new Array();

	for (spr=0;spr<sprites.length;spr++) {
		for (i=0;i<scripts[spr]['greenFlag'].length;i++) {
			eval(scripts[spr]['greenFlag'][i]);
		}
	}

	spr = "stage";
	for (i=0;i<scripts["stage"]['greenFlag'].length;i++) {
		eval(scripts["stage"]['greenFlag'][i]);
	}


	/*

	for (spr=0;spr<greenflag.length;spr++) {
		for (sprgf=0;sprgf<greenflag[spr].length;sprgf++) {
			//alert("About to execute greenflag["+j+"]["+i+"].");
			eval(String(greenflag[spr][sprgf]).substr(14, String(greenflag[spr][sprgf]).length-15));
		}
	}

	for (sprgf=0;sprgf<stageGreenflag.length;sprgf++) {
		eval(String(stageGreenflag[sprgf]).substr(14, String(stageGreenflag[sprgf]).length-15));
	}

	*/


}

function scratchEval(string) {
	eval(String(string).substr(14, String(string).length-15));
}

function executeFrame() {

	sprctx.clearRect(0, 0, 480, 360);
	spr = 0;

	for (ent=0;ent<project.children.length;ent++) { //spr=0;sprites.length;spr++

		if (project.children[ent].indexInLibrary == undefined) {

		if (project.children[ent].visible) {

		if (project.children[ent].cmd == "getVar:") { 

			sprctx.lineWidth = 1;

			resid = -1;

			if (project.children[ent].target == "Stage") {
				var vardisplay = scratchReadVar("stage", project.children[ent].param);
			} else {
				for (i=0;i<sprites.length;i++) {
					if (sprites[i].objName == project.children[ent].target) resid = i;
				}
				var vardisplay = scratchReadVar(resid, project.children[ent].param);
			}

			var varname = project.children[ent].label;

			if (project.children[ent].mode == 2) {

				sprctx.font = "Bold 12pt Arial";
				var valuelength = Math.max(36, sprctx.measureText(vardisplay).width);

				drawRoundedRectangle(sprctx, project.children[ent].x, project.children[ent].y, valuelength+12, 21, 7);
				sprctx.fillStyle = "#FFFFFF";
				sprctx.strokeStyle = "#FF6600";
				sprctx.fill();
				sprctx.stroke();

				drawRoundedRectangle(sprctx, project.children[ent].x-2, project.children[ent].y-2, valuelength+16, 25, 9);
				sprctx.strokeStyle = "#FFCC00";
				sprctx.stroke();

				sprctx.fillStyle = "#FF6600";
				sprctx.fillText(vardisplay, project.children[ent].x+6+valuelength/2-sprctx.measureText(vardisplay).width/2, project.children[ent].y+17);

			} else if ((project.children[ent].mode == 1) || (project.children[ent].mode == 3)) {

				sprctx.font = "Bold 10pt Arial";
				var valuelength = Math.max(24, sprctx.measureText(vardisplay).width);
				var namelength = sprctx.measureText(varname).width

				if (project.children[ent].mode == 1) var varheight = 21;
				else var varheight = 32;

				drawRoundedRectangle(sprctx, project.children[ent].x, project.children[ent].y, valuelength+16+namelength+10+4, varheight, 7);
				sprctx.fillStyle = "#FFFFFF";
				sprctx.strokeStyle = "#878787";
				sprctx.fill();
				sprctx.stroke();

				drawRoundedRectangle(sprctx, project.children[ent].x+namelength+10, project.children[ent].y+3, valuelength+16, 15, 4);
				sprctx.strokeStyle = "#FFCC00";
				sprctx.fill();
				sprctx.stroke();

				drawRoundedRectangle(sprctx, project.children[ent].x-2, project.children[ent].y-2, valuelength+16+namelength+10+4+4, varheight+4, 9);
				sprctx.strokeStyle = "#E2E2E2";
				sprctx.stroke();

				sprctx.fillStyle = "#333333";
				sprctx.fillText(varname, project.children[ent].x+5, project.children[ent].y+15);

				sprctx.fillStyle = "#FF6600";
				sprctx.fillText(vardisplay, project.children[ent].x+namelength+10+8+valuelength/2-(sprctx.measureText(vardisplay).width)/2, project.children[ent].y+15);

				if (project.children[ent].mode == 3) {
					drawRoundedRectangle(sprctx, project.children[ent].x+6, project.children[ent].y+22, (valuelength+16+namelength+10+4)-12, 6, 3);
					sprctx.fillStyle = "#CCCCCC";
					sprctx.strokeStyle = "#999999";
					sprctx.fill();
					sprctx.stroke();

					var scrollwidth = (valuelength+16+namelength+10+4)-17;

					if (scratchMouseDown && (MouseX+240 >= (project.children[ent].x+6)) && (MouseX+240 <= (project.children[ent].x+6+(valuelength+16+namelength+10+4)-12)) && (180-MouseY >= (project.children[ent].y+22)) && (180-MouseY <= (project.children[ent].y+28))) {
						// if anyone has a less stupid way to check this be my guest

						var decimalplaces = 0;
						var afterpoint = false;
						for (i=0;i<String(project.children[ent].sliderMin).length;i++) {
							if (String(project.children[ent].sliderMin).charAt(i) == ".") afterpoint = true;
							else if (afterpoint) decimalplaces += 1;
						}

						var decimalplaces2 = 0;
						afterpoint = false;
						for (i=0;i<String(project.children[ent].sliderMax).length;i++) {
							if (String(project.children[ent].sliderMax).charAt(i) == ".") afterpoint = true;
							else if (afterpoint) decimalplaces2 += 1;
						}

						decimalplaces = Math.max(decimalplaces, decimalplaces2);

						vardisplay = Math.max(Math.min(project.children[ent].sliderMin+((MouseX+240 - (project.children[ent].x+9))/scrollwidth)*(project.children[ent].sliderMax - project.children[ent].sliderMin), project.children[ent].sliderMax), project.children[ent].sliderMin);
						vardisplay = vardisplay.toFixed(decimalplaces)
						scratchSetVar(resid, project.children[ent].param, vardisplay);
					}

					var scrollfactor = (Math.max(Math.min(parseFloat(vardisplay), project.children[ent].sliderMax), project.children[ent].sliderMin) - project.children[ent].sliderMin) / (project.children[ent].sliderMax - project.children[ent].sliderMin)

					sprctx.beginPath();
					sprctx.arc(project.children[ent].x+8.5+(scrollwidth*scrollfactor), project.children[ent].y+25.5, 4.5, 0, Math.PI*2, true); 
					sprctx.fillStyle = "#FFFFFF";
					sprctx.strokeStyle = "#333333";
					sprctx.fill();
					sprctx.stroke();

					sprctx.beginPath();
					sprctx.arc(project.children[ent].x+8.5+(scrollwidth*scrollfactor), project.children[ent].y+25.5, 2.5, 0, Math.PI*2, true); 
					sprctx.strokeStyle = "#CCCCCC";
					sprctx.stroke();
				}

			}

		}

		}

		// ------- SPRITES -------

		} else {
		
		if (specialproperties[spr].pendown) {
			penctx.lineWidth = specialproperties[spr].pensize;
			penctx.strokeStyle = specialproperties[spr].color;
		}

		if (active) {
		
		processExecutionQueue();

		}

		if (forever[spr].length > 0) {

		/*
		for (sprfor=0;sprfor<forever[spr].length;sprfor++) {
			//alert(String(forever[spr][sprfor]).substr(14, String(forever[spr][sprfor]).length-15));


			if (String(forever[spr][sprfor]).substr(0,8) == 'function') { // && (foreverstatus[spr][sprfor] != 'halt')) 
				forever[spr][sprfor] = String(forever[spr][sprfor]).substr(14, String(forever[spr][sprfor]).length-15);
			}

			eval(forever[spr][sprfor]);
		}


		for (sprwait=0;sprwait<wait[spr].length;sprwait++) {

			if ((String(wait[spr][sprwait]).substr(0,8) == 'function') && (0 >= waittime[spr][sprwait])) {
				eval(String(wait[spr][sprwait]).substr(14, String(wait[spr][sprwait]).length-15));
				wait[spr].splice(sprwait, 1)
				waittime[spr].splice(sprwait, 1)
				sprwait -= 1;
			}
		}


		for (repeatnum=0;repeatnum<repeat[spr].length;repeatnum++) {

			if (String(repeat[spr][repeatnum]).substr(0,8) == 'function') {
				eval(String(repeat[spr][repeatnum]).substr(14, String(repeat[spr][repeatnum]).length-15));
				if (0 >= repeattime[spr][repeatnum]) {
					repeat[spr].splice(repeatnum, 1)
					repeattime[spr].splice(repeatnum, 1)
					repeatnum -= 1;
				}
			}
		}
		*/

		}

		if (sprites[spr].visible) {
			sprctx.save();
			var costume = sprites[spr].costumes[sprites[spr].currentCostumeIndex];

			var costdir = (sprites[spr].direction-90) * Math.PI / 180;

			sprctx.globalAlpha = (100-specialproperties[spr].effects['ghost'])/100;
			sprctx.translate(sprites[spr].scratchX+240, 180-sprites[spr].scratchY);
			if (sprites[spr].rotationStyle == "normal") {
				sprctx.rotate(costdir);
				sprctx.scale(Math.abs(sprites[spr].scale), Math.abs(sprites[spr].scale));
			} else if (sprites[spr].rotationStyle == "leftRight") {
				if (sprites[spr].direction > 0) sprctx.scale(Math.abs(sprites[spr].scale), Math.abs(sprites[spr].scale));
				if (sprites[spr].direction < 0)	sprctx.scale(Math.abs(sprites[spr].scale)*-1, Math.abs(sprites[spr].scale));
			}

			sprctx.drawImage(images[costume.baseLayerID], -costume.rotationCenterX, -costume.rotationCenterY);
			

			if (typeof costume.text != 'undefined') {

				if (costume.textLayerID != -1) {
					sprctx.drawImage(images[costume.textLayerID], -costume.rotationCenterX, -costume.rotationCenterY);
				}
		
			}
			sprctx.globalAlpha = 1;
			sprctx.restore();


		}
		spr += 1;

	}

	}

// ------- STAGE SCRIPTS -------

		if (active) {

		spr = "stage";

		processExecutionQueue();

		}

// ------- END STAGE SCRIPTS -------

	for (spr=0;spr<sprites.length;spr++) {

		if (sprites[spr].visible) {

			if (specialproperties[spr].say != "") {

				if (specialproperties[spr].say != specialproperties[spr].sayold) {

				specialproperties[spr].sayold = specialproperties[spr].say;
				specialproperties[spr].saylist = new Array();
				sprctx.font = "Bold 10pt Arial";
				var j=0
				var sayprevstring = "";
				var sayprevword = "";
				var saycurword = "";
				var saystring = "";
				
				for (var i=0; i<specialproperties[spr].say.length; i++) {
					sayprevstring = saystring;
					saystring += specialproperties[spr].say.substr(i, 1);
					if (specialproperties[spr].say.substr(i, 1) != " ") {
						saycurword += specialproperties[spr].say.substr(i, 1);
					} else {
						sayprevword += saycurword+" "
						saycurword = "";
					}

					saywidth = sprctx.measureText(saystring).width
					if (saywidth > 128) {
						if (sayprevword == "") {
							i -= 1;
							specialproperties[spr].saylist[j] = sayprevstring;
							saystring = "";
						} else {
							specialproperties[spr].saylist[j] = sayprevword;
							sayprevword = ""
							saystring = saycurword;
						}							
						sayprevstring = "";
						j += 1;
					}
				}
				if (saystring != "") {
					specialproperties[spr].saylist[specialproperties[spr].saylist.length] = saystring;
				}

				}

				var costume = sprites[spr].costumes[sprites[spr].currentCostumeIndex];

				var sayheight = 15*specialproperties[spr].saylist.length-6
				if (specialproperties[spr].saylist.length == 1) var saylength = Math.max(45, sprctx.measureText(specialproperties[spr].saylist[0]).width);
				else var saylength = 128;

				var sayright = true;

				var sayx = Math.max(8, ((sprites[spr].scratchX+240)-costume.rotationCenterX)+images[costume.baseLayerID].width+8);
				if (sayx+saylength+8 > 480) {
					sayright = false;

					sayx = Math.max(8, Math.min(480-(saylength+8), ((sprites[spr].scratchX+240)-costume.rotationCenterX)-(saylength+8)));
				}
				var sayy = Math.min((360-sayheight)-32, Math.max(8, ((180-sprites[spr].scratchY)-costume.rotationCenterY)-sayheight-16));

				sprctx.beginPath();
				sprctx.moveTo(sayx, sayy-8);
				sprctx.lineTo(sayx+saylength, sayy-8);
				sprctx.bezierCurveTo(sayx+saylength+8, sayy-8, sayx+saylength+8, sayy, sayx+saylength+8 , sayy)			
				sprctx.lineTo(sayx+saylength+8, sayy+sayheight);
				sprctx.bezierCurveTo(sayx+saylength+8, sayy+sayheight+8, sayx+saylength, sayy+sayheight+8, sayx+saylength , sayy+sayheight+8)

				if (!(specialproperties[spr].think)) {

				if (sayright) {
					sprctx.lineTo(sayx+40, sayy+sayheight+8);
					sprctx.lineTo(sayx, sayy+sayheight+8+16);
					sprctx.lineTo(sayx+5, sayy+sayheight+8);				
				} else {
					sprctx.lineTo(sayx+saylength-5, sayy+sayheight+8);
					sprctx.lineTo(sayx+saylength, sayy+sayheight+8+16);
					sprctx.lineTo(sayx+saylength-40, sayy+sayheight+8);	
				}

				}


				sprctx.lineTo(sayx, sayy+sayheight+8);	
				sprctx.bezierCurveTo(sayx-8, sayy+sayheight+8, sayx-8, sayy+sayheight, sayx-8, sayy+sayheight);
				sprctx.lineTo(sayx-8, sayy);	
				sprctx.bezierCurveTo(sayx-8, sayy-8, sayx, sayy-8, sayx, sayy-8);
				sprctx.closePath();
				sprctx.lineWidth = 3;
				sprctx.strokeStyle = "#C4C4C4";
				sprctx.fillStyle = "#FFFFFF";
				sprctx.fill();
				sprctx.stroke();

				if (specialproperties[spr].think) {

					sprctx.lineWidth = 2;

					if (sayright) {

					sprctx.beginPath();
					sprctx.moveTo(sayx+6, sayy+sayheight+8+6);
					sprctx.bezierCurveTo(sayx+6, sayy+sayheight+8+3, sayx+12, sayy+sayheight+8+3, sayx+12, sayy+sayheight+8+3);
					sprctx.bezierCurveTo(sayx+18, sayy+sayheight+8+3, sayx+18, sayy+sayheight+8+6, sayx+18, sayy+sayheight+8+6);
					sprctx.bezierCurveTo(sayx+18, sayy+sayheight+8+9, sayx+12, sayy+sayheight+8+9, sayx+12, sayy+sayheight+8+9);
					sprctx.bezierCurveTo(sayx+6, sayy+sayheight+8+9, sayx+6, sayy+sayheight+8+6, sayx+6, sayy+sayheight+8+6);
					sprctx.fill();
					sprctx.stroke();


					sprctx.beginPath();
					sprctx.moveTo(sayx+2, sayy+sayheight+8+14);
					sprctx.bezierCurveTo(sayx+2, sayy+sayheight+8+12, sayx+6, sayy+sayheight+8+12, sayx+6, sayy+sayheight+8+12);
					sprctx.bezierCurveTo(sayx+10, sayy+sayheight+8+12, sayx+10, sayy+sayheight+8+14, sayx+10, sayy+sayheight+8+14);
					sprctx.bezierCurveTo(sayx+10, sayy+sayheight+8+16, sayx+6, sayy+sayheight+8+16, sayx+6, sayy+sayheight+8+16);
					sprctx.bezierCurveTo(sayx+2, sayy+sayheight+8+16, sayx+2, sayy+sayheight+8+14, sayx+2, sayy+sayheight+8+14);
					sprctx.fill();
					sprctx.stroke();

					sprctx.beginPath();
					sprctx.arc(sayx-2, sayy+sayheight+8+18, 1.5, 0, Math.PI*2, true); 
					sprctx.fill();
					sprctx.stroke();

					} else {

					sprctx.beginPath();
					sprctx.moveTo((sayx+saylength)-6, sayy+sayheight+8+6);
					sprctx.bezierCurveTo((sayx+saylength)-6, sayy+sayheight+8+3, (sayx+saylength)-12, sayy+sayheight+8+3, (sayx+saylength)-12, sayy+sayheight+8+3);
					sprctx.bezierCurveTo((sayx+saylength)-18, sayy+sayheight+8+3, (sayx+saylength)-18, sayy+sayheight+8+6, (sayx+saylength)-18, sayy+sayheight+8+6);
					sprctx.bezierCurveTo((sayx+saylength)-18, sayy+sayheight+8+9, (sayx+saylength)-12, sayy+sayheight+8+9, (sayx+saylength)-12, sayy+sayheight+8+9);
					sprctx.bezierCurveTo((sayx+saylength)-6, sayy+sayheight+8+9, (sayx+saylength)-6, sayy+sayheight+8+6, (sayx+saylength)-6, sayy+sayheight+8+6);
					sprctx.fill();
					sprctx.stroke();


					sprctx.beginPath();
					sprctx.moveTo((sayx+saylength)-2, sayy+sayheight+8+14);
					sprctx.bezierCurveTo((sayx+saylength)-2, sayy+sayheight+8+12, (sayx+saylength)-6, sayy+sayheight+8+12, (sayx+saylength)-6, sayy+sayheight+8+12);
					sprctx.bezierCurveTo((sayx+saylength)-10, sayy+sayheight+8+12, (sayx+saylength)-10, sayy+sayheight+8+14, (sayx+saylength)-10, sayy+sayheight+8+14);
					sprctx.bezierCurveTo((sayx+saylength)-10, sayy+sayheight+8+16, (sayx+saylength)-6, sayy+sayheight+8+16, (sayx+saylength)-6, sayy+sayheight+8+16);
					sprctx.bezierCurveTo((sayx+saylength)-2, sayy+sayheight+8+16, (sayx+saylength)-2, sayy+sayheight+8+14, (sayx+saylength)-2, sayy+sayheight+8+14);
					sprctx.fill();
					sprctx.stroke();

					sprctx.beginPath();
					sprctx.arc((sayx+saylength)+2, sayy+sayheight+8+18, 1.5, 0, Math.PI*2, true); 
					sprctx.fill();
					sprctx.stroke();

					}

				}

				sprctx.fillStyle = "#333333";	
				for (var i=0; i<specialproperties[spr].saylist.length; i++) {	
					//log(specialproperties[spr].saylist[i]);
					var linelength = sprctx.measureText(specialproperties[spr].saylist[i]).width;
					sprctx.fillText(specialproperties[spr].saylist[i], sayx+(saylength/2)-(linelength/2), sayy+8+i*15);
				}
				
			}

		}

	}

	ctx.clearRect(0, 0, 480, 360);

	penctx.lineCap = "round";

	ctx.globalAlpha = 1;
	var costume = project.costumes[project.currentCostumeIndex];
	ctx.drawImage(images[costume.baseLayerID], (0-costume.rotationCenterX)+240, (0-costume.rotationCenterY)+180);

	ctx.drawImage(pencanvas, 0, 0);
	ctx.drawImage(sprcanvas, 0, 0);

	if (console) {
		ctx.globalAlpha = 0.75;
		ctx.fillStyle = "#000000";
		ctx.fillRect(0, 0, 480, 360);
		ctx.fillStyle = "#FFFFFF";
		for (i=0;i<Math.min(consolelog.length, 29);i++) {
			ctx.fillText(consolelog[(consolelog.length-Math.min(consolelog.length, 29))+i], 5, 15+i*12);
		}
	}
}

function update() {
	if (focus == 1) {

	focussteal.focus()

	}

	framectx.clearRect(0, 0, 486, 391);

	if(active) executeFrame();
	framectx.drawImage(frame, 0, 0);
	framebuffer = ctx.getImageData(0, 0, 480, 360);
	framectx.putImageData(framebuffer, 3, 28);

	if ((MouseX > 180) && (MouseX < 206) && (MouseY < 205) && (MouseY > 184)) {
		framectx.drawImage(greenflaga, 423, 3);	
	} else {
		framectx.drawImage(greenflagn, 423, 3);	
	}

	if ((MouseX > 215) && (MouseX < 235) && (MouseY < 205) && (MouseY > 184)) {
		framectx.drawImage(stopa, 456, 3);
	} else {
		framectx.drawImage(stopn, 456, 3);
	}


	//framectx.fillText("Program Running.", 10, 10);

	//framectx.fillText("("+MouseX+", "+MouseY+")", 10, 25);
}

function ScratchToJS(lscripts) {
	var scriptlist = new Array();
	foreverlength=0;
	greenflaglength=0;
	ifdepth = 0;
	extrabrackets = 0;
	ifLoopVar = new Array();
	for (scriptnum=0;scriptnum<lscripts.length;scriptnum++) {

		broadcastArgs = new Array();

		scripttext = new String();
		blockHandler(lscripts[scriptnum][2], false);
		//for (j=0;j<extrabrackets;j++) {
		//	scripttext += "}"
		//}
		scriptlist[scriptnum] = scripttext;
		//if (scripttext.substr(0, 9) == "greenflag") alert(scripttext);
		spr = spritenum;

		for (i=0;i<scripts[spritenum]['wait'].length;i++) {
			if (typeof scripts[spritenum]['wait'][i] == 'number') {
				scripts[spritenum]['wait'][i] = scratchRemoveExtraBrackets(scripttext.substr(scripts[spritenum]['wait'][i]));
			}
		}
		for (i=0;i<scripts[spritenum]['forever'].length;i++) {
			if (typeof scripts[spritenum]['forever'][i] == 'number') {
				scripts[spritenum]['forever'][i] = scratchRemoveExtraBrackets(scripttext.substr(scripts[spritenum]['forever'][i]));
			}
		}
		for (i=0;i<scripts[spritenum]['greenFlag'].length;i++) {
			if (typeof scripts[spritenum]['greenFlag'][i] == 'number') {
				scripts[spritenum]['greenFlag'][i] = scratchRemoveExtraBrackets(scripttext.substr(scripts[spritenum]['greenFlag'][i]));
			}
		}
		for (i=0;i<scripts[spritenum]['repeat'].length;i++) {
			if (typeof scripts[spritenum]['repeat'][i] == 'number') {
				scripts[spritenum]['repeat'][i] = scratchRemoveExtraBrackets(scripttext.substr(scripts[spritenum]['repeat'][i]));
			}
		}
		for (i=0;i<broadcastArgs.length;i++) {
			for (j=0;j<scripts[spritenum]['broadcast'][broadcastArgs[i]].length;j++) {	
			if (typeof scripts[spritenum]['broadcast'][broadcastArgs[i]][j] == 'number') {
				scripts[spritenum]['broadcast'][broadcastArgs[i]][j] = scratchRemoveExtraBrackets(scripttext.substr(scripts[spritenum]['broadcast'][broadcastArgs[i]][j]));
			}
			}
		}
		for (j=0;j<256;j++) {
		for (i=0;i<scripts[spritenum]['keyPress'][j].length;i++) {
			if (typeof scripts[spritenum]['keyPress'][j][i] == 'number') {
				scripts[spritenum]['keyPress'][j][i] = scratchRemoveExtraBrackets(scripttext.substr(scripts[spritenum]['keyPress'][j][i]));
			}
		}
		}


		//if (scripttext.substr(0, 9) == "greenflag") eval(scripttext);
		//if (scripttext.substr(0, 14) == "stageGreenflag") eval(scripttext);
		//if (scripttext.substr(0, 15) == "keyPressScripts") eval(scripttext);
		
	}


	return scriptlist;
}

active = new Boolean(false);
   
var ReadFile = function(url) {

	if (typeof updateInterval != 'undefined') {
		clearInterval(updateInterval);
	}

	scratchStopAllSounds();

	if (loaded != totalfiles) {
		alert("Viewer not loaded yet");
		return;
	}

	canvas = document.createElement("canvas");
	canvas.width = 480;
	canvas.height = 360;
	ctx = canvas.getContext("2d");

	pencanvas = document.createElement("canvas");
	pencanvas.width = 480;
	pencanvas.height = 360;

	sprcanvas = document.createElement("canvas");
	sprcanvas.width = 480;
	sprcanvas.height = 360;

	colcanvas = document.createElement("canvas");
	colcanvas.width = 480;
	colcanvas.height = 360;

	loadedb = false;

	colctx = colcanvas.getContext("2d");

	sprctx = sprcanvas.getContext("2d");

	penctx = pencanvas.getContext("2d");

	framectx.clearRect(0, 0, 486, 391);

	framectx.drawImage(frame, 0, 0);

	framectx.drawImage(preload, 3, 28);

        //var timer  = new Timer();
        var doneReading = function (zip) {

		loadedb = true; 

		
		//alert("parsing");
		for (i=0;i<zipFile.entries.length;i++) {
			if (zipFile.entries[i].name == "project.json") {
				project = JSON.parse(zipFile.entries[i].extract(null, true));
			}
		}

		images = new Array();
		sprites = new Array();
		specialproperties = new Array(); 
		for (i=0;i<project.children.length;i++) {
			if (project.children[i].indexInLibrary != undefined) {

				specialproperties[sprites.length] = new Object();
				specialproperties[sprites.length].pendown = Boolean(false);
				specialproperties[sprites.length].pensize = 1;
				specialproperties[sprites.length].say = "";
				specialproperties[sprites.length].sayold = "";
				specialproperties[sprites.length].saylist = new Array();
				specialproperties[sprites.length].think = false;
				specialproperties[sprites.length].ask = false;
				specialproperties[sprites.length].color = "#000000";
				specialproperties[sprites.length].penhue = "0";
				specialproperties[sprites.length].pensaturation = "100";
				specialproperties[sprites.length].penlightness = "50";
				specialproperties[sprites.length].effects = new Array();
				specialproperties[sprites.length].effects['ghost'] = 0;

				sprites[sprites.length] = project.children[i];


			}
		}

		scripts = new Array();
		executionQueue = new Array();

		// replacing soon \/

		greenflag = new Array();

		forever = new Array();
		foreverstatus = new Array();
		wait = new Array();
		waittimes = new Array();
		repeat = new Array();
		repeattimes = new Array();

		stageGreenflag = new Array();
		stageForever = new Array();

		repeatStack = new Array();

		for (i=0;i<sprites.length;i++) {
			scripts[i] = new Array();
			scripts[i]['wait'] = new Array();
			scripts[i]['keyPress'] = new Array();
			for (j=0;j<256;j++) {
				scripts[i]['keyPress'][j] = new Array();
			}
			scripts[i]['forever'] = new Array();
			scripts[i]['greenFlag'] = new Array();
			scripts[i]['repeat'] = new Array();
			scripts[i]['broadcast'] = new Array();

			executionQueue[i] = new Array();
			executionQueue[i]['wait'] = new Array();
			executionQueue[i]['forever'] = new Array();
			executionQueue[i]['greenFlag'] = new Array();
			executionQueue[i]['repeat'] = new Array();
			executionQueue[i]['broadcast'] = new Array();

			forever[i] = new Array();
			foreverstatus[i] = new Array();
			wait[i] = new Array();
			waittimes[i] = new Array();
			repeat[i] = new Array();
			repeattimes[i] = new Array();
			greenflag[i] = new Array();
		}

			scripts["stage"] = new Array();
			scripts["stage"]['wait'] = new Array();
			scripts["stage"]['keyPress'] = new Array();
			for (j=0;j<256;j++) {
				scripts["stage"]['keyPress'][j] = new Array();
			}
			scripts["stage"]['forever'] = new Array();
			scripts["stage"]['greenFlag'] = new Array();
			scripts["stage"]['repeat'] = new Array();
			scripts["stage"]['broadcast'] = new Array();

			executionQueue["stage"] = new Array();

			executionQueue["stage"]['broadcast'] = new Array();
			executionQueue["stage"]['wait'] = new Array();
			executionQueue["stage"]['forever'] = new Array();
			executionQueue["stage"]['greenFlag'] = new Array();
			executionQueue["stage"]['repeat'] = new Array();




		if (typeof project.variables != 'undefined') {

		globalvarIndex = new Array();
		for (i=0;i<project.variables.length;i++) {
			globalvarIndex[i] = project.variables[i].name;
		}

		}

		if (typeof project.lists != 'undefined') {

		globallistIndex = new Array();
		for (i=0;i<project.lists.length;i++) {
			globallistIndex[i] = project.lists[i].listName;
		}

		}

		if (typeof project.sounds != 'undefined') {

		globalsoundIndex = new Array();
		for (i=0;i<project.sounds.length;i++) {
			globalsoundIndex[i] = project.sounds[i].soundName;
		}

		}

		varIndex = new Array();
		soundIndex = new Array();
		listIndex = new Array();

		for (j=0;j<sprites.length;j++) {

			varIndex[j] = new Array();
			listIndex[j] = new Array();
			soundIndex[j] = new Array();

			if (typeof sprites[j].variables != 'undefined') {

			for (i=0;i<sprites[j].variables.length;i++) {
				varIndex[j][i] = sprites[j].variables[i].name;
			}
			
			}

			if (typeof sprites[j].sounds != 'undefined') {

			for (i=0;i<sprites[j].sounds.length;i++) {
				soundIndex[j][i] = sprites[j].sounds[i].soundName;
			}
			
			}

			if (typeof sprites[j].lists != 'undefined') {

			for (i=0;i<sprites[j].lists.length;i++) {
				listIndex[j][i] = sprites[j].lists[i].listName;
			}
			
			}

		}

		svgs = new Array();
		svgnums = new Array();
		audio = new Array();

		for (i=0;i<zipFile.entries.length;i++) {
			var ext = (zipFile.entries[i].name).substr(zipFile.entries[i].name.length-3)
			if (ext == "png") {
				var imagenum = parseInt((zipFile.entries[i].name).substr(0, zipFile.entries[i].name.length-4));
				var imgdata = zipFile.entries[i].extract()
				images[imagenum] = new Image();
				images[imagenum].src = "data:image/png;base64," + base64Encode(imgdata) //.toString() .replace(",", "");
				//document.getElementById('test2').innerHTML += "<img src='"+ images[imagenum].src +"'>"
			} else if (ext == "jpg") {
				var imagenum = parseInt((zipFile.entries[i].name).substr(0, zipFile.entries[i].name.length-4));
				var imgdata = zipFile.entries[i].extract()
				images[imagenum] = new Image();
				images[imagenum].src = "data:image/jpeg;base64," + base64Encode(imgdata) //.toString() .replace(",", "");
				//document.getElementById('test2').innerHTML += "<img src='"+ images[imagenum].src +"'>"
			} else if (ext == "svg") {
				svgs[svgs.length] = zipFile.entries[i].extract(null, true);
				svgnums[svgnums.length] = parseInt((zipFile.entries[i].name).substr(0, zipFile.entries[i].name.length-4));
			} else if (ext == "wav") {
				var imagenum = parseInt((zipFile.entries[i].name).substr(0, zipFile.entries[i].name.length-4));
				var imgdata = zipFile.entries[i].extract()
				audio[imagenum] =document.createElement("audio");
				audio[imagenum].src = "data:audio/wav;base64," + base64Encode(imgdata) //.toString() .replace(",", "");
				//document.getElementById('test2').innerHTML += "<audio controls='controls' autobuffer='autobuffer' autoplay='autoplay' src='"+ audio[imagenum].src +"'/></audio>"
			}
		}

		//penctx.drawImage(images[0], 0, 0);
		scratchClearPen();
		spritenum = "stage";

		if (typeof project.scripts != 'undefined') {
			javascriptgen = ScratchToJS(project.scripts);
			/*
			for (j=0;j<javascriptgen.length;j++) {
				document.getElementById('test').innerHTML += javascriptgen[j] + "<br>";
			}
			document.getElementById('test').innerHTML += "---stage---<br>"
			*/
		}

		spritenum = 0;
		
		for (spritenum=0;spritenum<sprites.length;spritenum++) {
			if (typeof sprites[spritenum].scripts != 'undefined') {
				javascriptgen = ScratchToJS(sprites[spritenum].scripts);
				for (j=0;j<javascriptgen.length;j++) {
					document.getElementById('test').innerHTML += javascriptgen[j] + "<br>";
				}

				document.getElementById('test').innerHTML += "---sprite "+spritenum+"---<br>"
			}
			//spritenum += 1;
		}

		penctx.lineCap = "round"; 

		execGreenFlag();

		updateInterval = setInterval(update, 33);
		setTimeout(renderSVGs, 1);

        };
        var zipFile = new ZipFile(url, doneReading, 1);
    };

    </script>

  </head>

  <body style="margin:0px;">

    <div id='main' class='column'>

<div style="position: absolute; top: 50%; width:100%" >
<div style="width:486px; height:420px; margin-left:auto; margin-right:auto;">
<div style="position: relative; top: -50%;">


	<canvas id='scratch' width='486' height='391' tabindex='1'></canvas>

	<!-- <canvas id='pencanvas' width='480' height='360'></canvas> -->
    <div style='margin-left:20px;'>
      <select style='margin:2px 0px 12px 0px;' id="urlToLoad">
        <option>stamptest.sb2</option>
        <option>yay.sb2</option>
        <option>saytest.sb2</option>
        <option>test.sb2</option>
        <option>line.sb2</option>
        <option>yes.sb2</option>
        <option>ContrastHQ.sb2</option>
        <option>not fez.sb2</option>
        <option>follow.sb2</option>
        <option>LINE Tennis.sb2</option>
        <option>coin.sb2</option>
        <option>variabletest.sb2</option>
        <option>variablepong.sb2</option>
        <option>waittest.sb2</option>
        <option>repeattest1.sb2</option>
        <!-- <option>Kart.sb2</option> -->
      </select>
    <input style='padding:2px;'
           onclick='ReadFile("examples/" + $("#urlToLoad").val())' type='button' title='Play' value='Play'/>
<a href="extras.htm" style="margin-left:15px;">Extras</a>
    </div>
<form name="f" style="position:absolute;opacity:0;">
  <input id="focusstealer">
</form>



</div>
</div>
</div>

<div id="test" style="display:none"> </div>
<div id="test2" style="display:none"> </div>


</html>


